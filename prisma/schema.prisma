datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Address {
  id           String         @id @default(cuid())
  street       String
  city         String
  state        String
  zip          String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  User         User[]
  Organization Organization[]
}

model Role {
  id   String @id @default(cuid())
  name String
}

model User {
  id            String               @id @default(cuid())
  name          String?
  email         String               @unique
  emailVerified DateTime?
  passwordHash  String?              @map("password_hash")
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  Organization  Organization[]
  memberOf      OrganizationMember[]
  address       Address?             @relation(fields: [addressId], references: [id])
  addressId     String?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Organization {
  id                        String               @id @default(uuid())
  name                      String
  description               String?
  slug                      String?              @unique
  domain                    String?              @unique
  shouldAttachUsersByDomain Boolean              @default(false) @map("should_attach_users_by_domain")
  logoUrl                   String?              @map("logo_url")
  owner                     User                 @relation(fields: [ownerId], references: [id])
  ownerId                   String               @map("owner_id")
  address                   Address?             @relation(fields: [addressId], references: [id])
  addressId                 String?
  OrganizationMember        OrganizationMember[]
  size                      String?
  lineOfActivity            String?              @map("line_of_activity")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("organizations")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
